# Generated by Django 4.1.7 on 2023-03-30 18:35

import django.contrib.postgres.fields
import django.db.models.deletion
import taggit_selectize.managers
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("library", models.CharField(blank=True, max_length=55)),
                (
                    "location",
                    models.CharField(
                        default="Winterthur, DE",
                        help_text="Location of the library.",
                        max_length=255,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CollectionManager",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="DocumentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "display_labels",
                    models.CharField(
                        blank=True,
                        help_text="Optional label to display on the public site.",
                        max_length=255,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Fragment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["collection", "created"],
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("language", models.CharField(blank=True, max_length=55)),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Option to override the autogenerated language-script name",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "iso_code",
                    models.CharField(
                        blank=True,
                        help_text="ISO 639 code for this language (2 or 3 letters)",
                        max_length=3,
                        verbose_name="ISO Code",
                    ),
                ),
            ],
            options={
                "verbose_name": "Language",
                "verbose_name_plural": "Languages",
                "ordering": ["language"],
            },
        ),
        migrations.CreateModel(
            name="LanguageManager",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TextBlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "selected_images",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        size=None,
                        verbose_name="Selected image indices",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="denig.document"
                    ),
                ),
                (
                    "fragment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="denig.fragment"
                    ),
                ),
            ],
            options={
                "ordering": ["document", "fragment"],
            },
        ),
        migrations.AddConstraint(
            model_name="language",
            constraint=models.UniqueConstraint(
                fields=("language", "display_name"), name="unique_language_display_name"
            ),
        ),
        migrations.AddField(
            model_name="fragment",
            name="collection",
            field=models.ForeignKey(
                blank=True,
                help_text="Link to a collection for this fragment.",
                max_length=255,
                on_delete=django.db.models.deletion.CASCADE,
                to="denig.collection",
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="doctype",
            field=models.ForeignKey(
                blank=True,
                help_text="Select a document type.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="denig.documenttype",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="languages",
            field=models.ManyToManyField(
                blank=True,
                help_text="Select the language(s) of this document.",
                to="denig.language",
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="tags",
            field=taggit_selectize.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
